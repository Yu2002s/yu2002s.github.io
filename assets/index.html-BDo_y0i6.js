import{_ as t,o as l,c as i,e as a}from"./app-CV__oJZ3.js";const r={};function n(s,e){return l(),i("div",null,e[0]||(e[0]=[a('<h2 id="一、var、let、const的区别" tabindex="-1"><a class="header-anchor" href="#一、var、let、const的区别"><span>一、var、let、const的区别</span></a></h2><p>var存在变量提升的情况，就是js预解析出现的问题，当声明再全局作用域下，var 声明的变量是挂在window上的 let是es6新增的特性，可以解决暂时性死区的问题，在一个括号下，let会形成一个块级作用域，所以日常中let用的多一点 const 是声明常量，定义了之后就不能改变，但是能改变堆中的内容，我们一般用于声明常量或者声明函数</p><h2 id="二、es6新增特性" tabindex="-1"><a class="header-anchor" href="#二、es6新增特性"><span>二、es6新增特性</span></a></h2><ul><li>拓展运算符 ...</li><li>解构赋值</li><li>const let</li><li>新增两种类型 map和set</li><li>数组方法 fill from includes等</li><li>for...in 遍历对象和继承的属性，Object.keys()</li><li>对象新增方法，Object.assign、</li><li>函数的参数允许默认值</li><li>箭头函数</li></ul><h2 id="三、set、map使用和应用场景" tabindex="-1"><a class="header-anchor" href="#三、set、map使用和应用场景"><span>三、Set、Map使用和应用场景</span></a></h2><p>Set是用于保存唯一值 Map用于像对象一样保存内容，他允许所有内容当作key Set方法：add、delete、has、clear Map方法：size、set、get、has、delete、clear</p><h2 id="四、promise相关" tabindex="-1"><a class="header-anchor" href="#四、promise相关"><span>四、Promise相关</span></a></h2><ul><li>Promise 的三种状态 pending、fufuilled 、 reject</li><li>Promise原理：</li></ul><ol><li>promise是基于发布订阅是方法实现的</li><li>首先执行promise传入的回调函数</li><li>这里会出现同步或者异步的问题，如果是同步就会立即执行resolve、reject如果是异步，那么一定不会立即执行resolve和reject</li><li>执行then中的内容，判断promise的状态，如果已经改变了那么肯定为同步状态，就立即执行then中的结果，我们这里使用<code>setTimeout(()=&gt;{},0)</code>如果状态还没有被改变，就将then中的函数放到异步队列中，有一个成功的队列，失败的队列</li><li>异步执行，调用resolve和reject，resolve和reject由我们定义，用于改变状态，然后将队列中的内容都拿出来，都执行一次 这里需要解决三个问题 第一个是穿透问题，就是then中如果没有成功或者失败函数，就return 结果 第二个是链式调用的问题，我们这里是解决方式是也返回一个promise， 第三个是微任务和宏任务的问题，使用是<code>quequeMicrotask(()=&gt;{})</code>将微任务添加到微任务队列中</li></ol><ul><li>promise的其他方法</li></ul><ul><li>then 执行成功或者失败的回调</li><li>catch 用于捕获失败的执行回调</li><li>finally 无论成功还是失败都会执行</li><li>all 都成功才会调用res ， 只要一个失败就走 err</li><li>race 赛跑机制，只要有一个成功就执行成功，只要有一个失败就失败</li></ul><h2 id="五、实现发布订阅" tabindex="-1"><a class="header-anchor" href="#五、实现发布订阅"><span>五、实现发布订阅</span></a></h2><p>发布订阅原理是当订阅的时候将内容存放到容器中，发布阶段就将内容函数拿出来执行。</p><ol><li>需要定义一个容器用于存储on方法的回调函数，on方法将回调函数按照key、value（数组）的形式将函数存放在容器中</li><li>需要emit方法就是找出数组中相对应的key，拿出来执行即可</li></ol>',14)]))}const c=t(r,[["render",n],["__file","index.html.vue"]]),p=JSON.parse('{"path":"/interview/rjf7ah5c/","title":"ES6面试题","lang":"zh-CN","frontmatter":{"title":"ES6面试题","createTime":"2024/07/09 21:01:59","permalink":"/interview/rjf7ah5c/","description":"一、var、let、const的区别 var存在变量提升的情况，就是js预解析出现的问题，当声明再全局作用域下，var 声明的变量是挂在window上的 let是es6新增的特性，可以解决暂时性死区的问题，在一个括号下，let会形成一个块级作用域，所以日常中let用的多一点 const 是声明常量，定义了之后就不能改变，但是能改变堆中的内容，我们一般用...","head":[["meta",{"property":"og:url","content":"https://www.jdynb.xyz/interview/rjf7ah5c/"}],["meta",{"property":"og:site_name","content":"冬日暖雨"}],["meta",{"property":"og:title","content":"ES6面试题"}],["meta",{"property":"og:description","content":"一、var、let、const的区别 var存在变量提升的情况，就是js预解析出现的问题，当声明再全局作用域下，var 声明的变量是挂在window上的 let是es6新增的特性，可以解决暂时性死区的问题，在一个括号下，let会形成一个块级作用域，所以日常中let用的多一点 const 是声明常量，定义了之后就不能改变，但是能改变堆中的内容，我们一般用..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-17T04:45:49.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-17T04:45:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ES6面试题\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-17T04:45:49.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"一、var、let、const的区别","slug":"一、var、let、const的区别","link":"#一、var、let、const的区别","children":[]},{"level":2,"title":"二、es6新增特性","slug":"二、es6新增特性","link":"#二、es6新增特性","children":[]},{"level":2,"title":"三、Set、Map使用和应用场景","slug":"三、set、map使用和应用场景","link":"#三、set、map使用和应用场景","children":[]},{"level":2,"title":"四、Promise相关","slug":"四、promise相关","link":"#四、promise相关","children":[]},{"level":2,"title":"五、实现发布订阅","slug":"五、实现发布订阅","link":"#五、实现发布订阅","children":[]}],"readingTime":{"minutes":2.65,"words":794},"git":{"createdTime":1731818749000,"updatedTime":1731818749000,"contributors":[{"name":"jdy2002","email":"jiangdongyu54@gmail.com","commits":1}]},"autoDesc":true,"filePathRelative":"notes/interview/基础/4.ES6面试题.md","bulletin":false}');export{c as comp,p as data};
