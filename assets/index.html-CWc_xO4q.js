import{_ as s,o as a,c as l,e as n}from"./app-CV__oJZ3.js";const e={};function t(h,i){return a(),l("div",null,i[0]||(i[0]=[n(`<h2 id="一、js中数据数据类型" tabindex="-1"><a class="header-anchor" href="#一、js中数据数据类型"><span>一、JS中数据数据类型</span></a></h2><p>分为简单数据类型和复杂数据类型两种 基本数据类型分为</p><ul><li>Number</li><li>String</li><li>Boolean</li><li>Null</li><li>Undefined</li><li>symbol 复杂数据类型分为 Array，Object，Function，Reg Exp 他们的区别是</li><li>简单数据类型：是存储在栈中，如果涉及到引用就重新开辟一个内存空间，然后将内容拷贝过去</li><li>复杂数据类型：是存储在堆中的，变量保存的是他的内存地址，如果设计到引用是将内存地址拷贝给其他变量，所以如果内存地址中内容发生改变，他们的引用因为是同一内存就会发生改变</li></ul><h2 id="二、数组的常用方法" tabindex="-1"><a class="header-anchor" href="#二、数组的常用方法"><span>二、数组的常用方法</span></a></h2><ul><li>增：push、unshift、splice、content</li><li>删：pop、shift、splice、slice</li><li>改：splice、</li><li>查：indexOf、includes、find</li><li>排序：reverse，sort</li><li>转换：join</li><li>迭代：forEach、map、filter、reduce、some、every</li></ul><h2 id="三、字符串常用方法" tabindex="-1"><a class="header-anchor" href="#三、字符串常用方法"><span>三、字符串常用方法</span></a></h2><ul><li>增：concat</li><li>删：slice、subStr、subString</li><li>改：splice、trim、toLowerCase、toUpperCase</li><li>查：charAt、indexOf、includes、startWith</li><li>转换：split</li><li>匹配：match、search、replace</li></ul><h2 id="四、js中的转换机制" tabindex="-1"><a class="header-anchor" href="#四、js中的转换机制"><span>四、JS中的转换机制</span></a></h2><p>显式转换：Number、parseInt、String、Boolean 隐式转换：</p><ul><li>比较运算和算数运算的时候</li><li>会undefined、null、NaN、false、+0、-0、&quot;&quot;会转化为false</li></ul><h2 id="五、和-的区别" tabindex="-1"><a class="header-anchor" href="#五、和-的区别"><span>五、<mark>和</mark>=的区别</span></a></h2><p>双等于会有隐式转换的过程，内部会将类型转换成同一类型、然后再进行比较 双等于一般用于比较两者的布尔值、不太严谨 三等于一般是严格比较类型和值，一般都使用三等于</p><h2 id="六、浅拷贝和深拷贝" tabindex="-1"><a class="header-anchor" href="#六、浅拷贝和深拷贝"><span>六、浅拷贝和深拷贝</span></a></h2><p>浅拷贝一般指的是拷贝对象的表层，一般是Object.assign、concat、拓展运算符等 深拷贝是对对象的所有内容进行拷贝，使两个对象毫不相关、</p><ul><li>JSON正反序列化</li><li>递归的方式拷贝</li><li>浏览器提供了一个API ：structuredClone</li><li>函数库lodash，中有一个cloneDeep方法</li></ul><h2 id="七-闭包的理解及使用" tabindex="-1"><a class="header-anchor" href="#七-闭包的理解及使用"><span>七：闭包的理解及使用</span></a></h2><p>函数中返回一个函数，函数运行可以访问到上一个函数作用域中的变量，这就是闭包 闭包的使用场景</p><ol><li>柯里化函数，将接收多个参数的函数转化为单一参数，将之前的参数缓存起来，等到符合条件就一起执行的方法</li><li>比如一些变量不想污染全局，函数运行返回函数，执行时访问闭包中的变量，比如防抖和节流中的开关和定时器</li></ol><h2 id="八、防抖和节流的理解和使用场景" tabindex="-1"><a class="header-anchor" href="#八、防抖和节流的理解和使用场景"><span>八、防抖和节流的理解和使用场景</span></a></h2><p>防抖就是回城被打断了，就需要重新按B回城</p><div class="language-typescript line-numbers-mode" data-ext="typescript" data-title="typescript"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> debounce</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">fn</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> delay</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 200</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  let </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">timer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> function</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 如果这个函数已经被触发了</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">timer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">){</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">      clearTimeout</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">timer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    timer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> setTimeout</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">      fn</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">apply</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> arguments</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 透传 this和参数</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">      timer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    },</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">delay</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>节流就是技能放过了，正在cd，再摁就是技能没有准备好</p><div class="language-typescript line-numbers-mode" data-ext="typescript" data-title="typescript"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 节流函数</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> throttle</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">fn</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> delay</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 200</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">  let  </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">timer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">  return</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> function</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">timer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">){</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">      return</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    timer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> setTimeout</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;{</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">      fn</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">apply</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> arguments</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 透传 this和参数</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">      timer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    },</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">delay</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者就是发送请求的时候将开关关掉，等请求回来了，再把按钮打开</p><h2 id="九、作用域和作用域链" tabindex="-1"><a class="header-anchor" href="#九、作用域和作用域链"><span>九、作用域和作用域链</span></a></h2><ul><li>全局作用域：就是全局的</li><li>函数作用域：函数执行时产生的作用域，这里需要注意的是函数在没有运行的时候是以字符串的方式保存在堆中的引用数据类型，执行之后才会产生函数作用域</li><li>块级作用：定义let会产生块级作用域 当我们需要访问变量的时候，如果本作用域中没有此变量，就会逐层向上查找，一直找到window，如果没有找到就会报not Fund的错误</li></ul><h2 id="十、原型和原型链的理解" tabindex="-1"><a class="header-anchor" href="#十、原型和原型链的理解"><span>十、原型和原型链的理解</span></a></h2><p>原型：prototype 每个函数或者类都有一个属性叫prototype，每个对象都有一个属性叫__proto__，对象的__proto__指向他所属类的prototype 当需要查找对象上的某个属性时，就通过__proto__按照原型链从下至上查找，一直查到Object.prototype</p><h2 id="十一、如何实现继承" tabindex="-1"><a class="header-anchor" href="#十一、如何实现继承"><span>十一、如何实现继承</span></a></h2><ul><li>原型链继承 ：子类的原型等于父类的实例</li><li>构造函数继承：在子组件内部使用call执行获得父组件的实例</li><li>组合继承：二者合并</li><li>Object.create：实现对象浅拷贝，深层次就会出现问题</li><li>类中使用extends</li></ul><h2 id="十二、this指向问题" tabindex="-1"><a class="header-anchor" href="#十二、this指向问题"><span>十二、this指向问题</span></a></h2><p>一般来说，this指向的是调用 . 之前的对象，</p><ul><li>比如事件对象就是事件对象.fn this指向事件对象</li><li>执行定时器相当于 window.fn this指向window</li><li>在实例内部，this就是指向实例 箭头函数有this，注意是有this 他的this是在定义的时候就已经确定了也就是说编译的时候绑定了this而不是运行的时候绑定this，在哪里定义的this就指向哪里。这里有个坑是事件对象的箭头函数this指向window</li></ul><h2 id="十三、js中执行上下文和执行栈" tabindex="-1"><a class="header-anchor" href="#十三、js中执行上下文和执行栈"><span>十三、JS中执行上下文和执行栈</span></a></h2><p>执行上下文就是函数运行过程中创建的作用域，函数内部所创建的变量外部都不能被访问到 执行栈就是相当于一个加工厂，当函数执行的时候，就会创建一个函数执行上下文，然后将其压入到栈中，当函数执行完毕的时候将函数弹出 js执行的流程</p><ol><li>创建全局上下文，将其压入到执行栈中</li><li>遇到单行脚本，就执行然后将其压入到栈中，执行完毕之后出栈</li><li>遇到函数，就创建函数执行上下文，然后将其押入到栈中，执行第一行脚本再将其压入到栈中，执行完毕后出栈</li><li>函数内所有内容都执行完毕了，将函数执行上下文出栈，继续执行</li><li>当所有的代码都执行完毕的时候，全年据上下文也会被出栈</li></ol><h2 id="十四、事件和事件流" tabindex="-1"><a class="header-anchor" href="#十四、事件和事件流"><span>十四、事件和事件流</span></a></h2><p>事件就是与dom文件交互发生的各种事件 事件流就是事件会在元素上发生，然后逐级向上传播，最后到达document 阻止事件冒泡 event.preventDefault()</p><h2 id="十五、typeof-和-instanceof" tabindex="-1"><a class="header-anchor" href="#十五、typeof-和-instanceof"><span>十五、typeof 和 instanceof</span></a></h2><p>typeof只能判断基本数据类型，如果遇到大多数引用数据类型就只能返回object instanceof用于检测实例是否由此构造函数创建，返回true / false 如果需要检测通用数据类型可以使用 Object.prototype.toString，调用此方法会统一返回 [object 类型] 封装函数就能识别数据类型</p><h2 id="十六、事件代理的原理和使用场景" tabindex="-1"><a class="header-anchor" href="#十六、事件代理的原理和使用场景"><span>十六、事件代理的原理和使用场景</span></a></h2><p>就是通过事件冒泡的机制，子元素触发，父元素也能捕获到事件 使用方法为 addListenerEvent 使用场景是给很多子元素创建代理，或者子元素有可能后面才创建</p><h2 id="十七、new操作之后做了什么" tabindex="-1"><a class="header-anchor" href="#十七、new操作之后做了什么"><span>十七、new操作之后做了什么</span></a></h2><ol><li>创建一个新的对象，</li><li>将对象与创建的函数通过原型链联系起来</li><li>将this绑定在实例中</li><li>根据构造函数的返回值返回内容，如果没有写就返回实例</li></ol><h2 id="十八、bind、call、apply的区别" tabindex="-1"><a class="header-anchor" href="#十八、bind、call、apply的区别"><span>十八、bind、call、apply的区别</span></a></h2><p>他们都是能修改this指向的方法</p><ul><li>call是让函数执行，让函数的this指向call的第一个参数，然后将剩余的参数传入到函数中</li><li>apply也是让函数执行，然后this指向apply的第一个参数，不同的是传入的参数是以数组的方式</li><li>bind是返回一个被改变this的函数，传参方式和call相同 call的原理是什么 在传入的第一个参数上面定义一个函数，然后执行他 <code>obj.$fn = this</code> 这样this就能修改为obj了执行的时候将参数传入</li></ul><h2 id="十九、事件循环、宏任务和微任务" tabindex="-1"><a class="header-anchor" href="#十九、事件循环、宏任务和微任务"><span>十九、事件循环、宏任务和微任务</span></a></h2><ol><li>当浏览器执行js脚本的时候，会区分同步任务和异步任务，当遇到同步任务直接执行，当遇到异步任务时就将异步任务放入到异步队列中</li><li>js执行同步任务时，如果遇到微任务，就将其放入到微任务队列中</li><li>待宏任务执行完毕的时候，就将微任务队列中的每一项拿出开执行，如果期间产生了微任务，就等这次微任务执行完毕之后再执行</li><li>微任务队列清空之后，执行gui渲染</li><li>然后循环 常见的宏任务为JS线程、setTimeout、setImmediate等 常见的微任务为promise中的then、catch、finally、nextTick等</li></ol><h2 id="二十、async和await是什么-实现原理" tabindex="-1"><a class="header-anchor" href="#二十、async和await是什么-实现原理"><span>二十、async和await是什么，实现原理</span></a></h2><p>async和await实际上是generator的语法糖，他能解决promise的过多then的问题，使代码更具有线性思维，更容易书写和阅读 其原理是使用gennerator状态机，当执行到yield的时候，就返回一个promise对象，等promise改变状态的时候调用其next方法，以此类推</p><h2 id="二一、dom增删改查" tabindex="-1"><a class="header-anchor" href="#二一、dom增删改查"><span>二一、DOM增删改查</span></a></h2><ul><li>增：createElement、createNodeText</li><li>删：parentNode.reoveChild(&quot;元素&quot;)</li><li>改：appendChild、insertBefore</li><li>查：querySelector</li></ul><h2 id="二二、什么是递归、应用场景是什么" tabindex="-1"><a class="header-anchor" href="#二二、什么是递归、应用场景是什么"><span>二二、什么是递归、应用场景是什么</span></a></h2><p>递归就是自己调用自己，返回经过处理的内容 使用场景比如深拷贝、数据的树状类型转平面</p><h2 id="二三、什么是内存泄漏、怎么解决内存泄漏-怎么避免" tabindex="-1"><a class="header-anchor" href="#二三、什么是内存泄漏、怎么解决内存泄漏-怎么避免"><span>二三、什么是内存泄漏、怎么解决内存泄漏，怎么避免</span></a></h2><p>内存泄漏就是在计算机中，因为疏忽的原因并没有对使用过的内存进行释放，从而造成内存的浪费就是内存泄漏 怎么解决内存泄漏的问题：把不使用的变量使用null，浏览器就会进行垃圾回收 怎么避免：能用循环就少使用递归，就算使用递归也要及时使内存地址与变量断开连接，让浏览器清空内存</p><h2 id="二四、强引用、弱引用、的区别" tabindex="-1"><a class="header-anchor" href="#二四、强引用、弱引用、的区别"><span>二四、强引用、弱引用、的区别</span></a></h2><p>强引用：是常见的赋值只要有内容应用这个内存地址，那么这个内存地址就不会被删除 软引用：通过weakMap和weakSet创建，只要垃圾回收机制运行，就会被移除</p><h2 id="二五、本地存储的方式和区别" tabindex="-1"><a class="header-anchor" href="#二五、本地存储的方式和区别"><span>二五、本地存储的方式和区别</span></a></h2><ul><li>cookie默认在关闭浏览器时实现，但如果设置了失效时间，就按照时间，cookie会在发送请求的时候自动设置在请求头中，服务端也可以使用setCookie设置客户端的cookie</li><li>sessionStoreage默认是在关闭浏览器的时候失效，与cookie相比并不能设置过期时间，也不能随着请求被发送到后端</li><li>localStoreage默认是永久不失效，除非手动删除，一般大小为5M 也不能随着请求被发送到后端 还有一个是indexDB 可以满足存储的一切方法</li></ul><h2 id="二六、js运算精度丢失的问题-如何解决" tabindex="-1"><a class="header-anchor" href="#二六、js运算精度丢失的问题-如何解决"><span>二六、js运算精度丢失的问题，如何解决</span></a></h2><p>就是在计算机的角度，二进制计算后得到无限不循环小数，在转化为十进制就会出现精度丢失 解决方式是使用matchjs，别人封装的包</p><h2 id="二七、懒加载的应用和原理" tabindex="-1"><a class="header-anchor" href="#二七、懒加载的应用和原理"><span>二七、懒加载的应用和原理</span></a></h2><p>用于优化长列表，加快首次渲染的速度</p><ol><li>使用offsetTop获取上边框到元素上边框的距离</li><li>使用scrollTop获取滚动点到上边框距离</li><li>如果滚动距离快要接近上边框了，就给元素src让他去加载内容</li></ol><h2 id="二八、大文件上传和断点续传" tabindex="-1"><a class="header-anchor" href="#二八、大文件上传和断点续传"><span>二八、大文件上传和断点续传</span></a></h2><p>应用场景：上传大文件，应用就会卡住，不能进行任何操作，如果关闭就需要重来，所以需要使用大文件上传和断点续传</p><ol><li>首先需要对文件进行检测，根据内容生成hash值，需要使用speak-md5这个包，需要安装</li><li>将hash名发送到后端，看看已经上传了多少了，后端需要返回已经上传成功的切片列表</li><li>将文件切片，如果文件小就固定大小，如果文件过大，就使用固定片数，切片就算使用文件对象的属性叫slice，根据返回的没有成功的列表把文件切割，然后再将文件的切片发送到后端</li><li>切片成功的列表也可以用于进度条，如果全部成功了，后端将所有的文件切片合并起来，组成完整的文件</li></ol><h2 id="二九、上拉刷新和下拉刷新" tabindex="-1"><a class="header-anchor" href="#二九、上拉刷新和下拉刷新"><span>二九、上拉刷新和下拉刷新</span></a></h2><p>上拉刷新本质是触底</p><ol><li>需要在最下面放一个盒子，监听滚动条的位置</li><li>当页面的总滚动条小于盒子距离上方的距离+滚动条距离，那我们就认为他触底了，需要触发更新</li><li>需要注意的是监听滚动条需要使用防抖，浏览器虽然有内置的节流机制，但是触发时间过短，还是会导致触发多次</li><li>触发成功之后开始启动下拉刷新 下拉的本质是到顶</li><li>需要监听第一个盒子，监听第一个盒子的位置</li><li>监听滑动事件，当页面滚动减去元素位置大于一定的插值，就认为是下拉刷新</li><li>发起请求并渲染 这里需要注意的是有可能初次渲染的问题，骨架屏没有加载出来，就导致监听的盒子触发触底事件，所以需要对骨架屏加载出来才监听事件的处理</li></ol><h2 id="三十、单点登录" tabindex="-1"><a class="header-anchor" href="#三十、单点登录"><span>三十、单点登录</span></a></h2><p>本质就是将多个系统的登录情况都保存在同一个服务器下，建立信任信息，由信任系统保管所有域名下的登录信息，根据域名和标识符保存</p><h2 id="三一、js预编译" tabindex="-1"><a class="header-anchor" href="#三一、js预编译"><span>三一、JS预编译</span></a></h2><p>JS脚本在执行之前，执行预编译，遇到var就将变量声明但是不赋值，如果遇到function就将函数声明并赋值</p><h2 id="三二、new的实现原理" tabindex="-1"><a class="header-anchor" href="#三二、new的实现原理"><span>三二、new的实现原理</span></a></h2><ol><li>创建一个空对象</li><li>将空对象连接到new 后面的函数的原型对象上</li><li>将空对象作为构造函数的上下文</li><li>如果没有return返回this，如果有返回就正常返回</li></ol><div class="language-typescript line-numbers-mode" data-ext="typescript" data-title="typescript"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> fn</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">){</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">开始实例化</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> name</span></span>
<span class="line"><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">    this</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">age</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 25</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">let </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">f1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> new </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">fn</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">fu</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">f1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> myNew</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">constructor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">){</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> function</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(...</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">args</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">){</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        let </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">obj</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Object</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">create</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">constructor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">prototype</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">        let </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">res</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> constructor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">call</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">obj</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ...</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">args</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">        return</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> res</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ||</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> obj</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">let </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">f2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> myNew</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">fn</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">fu</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">f2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,79)]))}const k=s(e,[["render",t],["__file","index.html.vue"]]),r=JSON.parse('{"path":"/interview/qui3z9y0/","title":"JS基础面试题","lang":"zh-CN","frontmatter":{"title":"JS基础面试题","createTime":"2024/07/09 20:59:49","permalink":"/interview/qui3z9y0/","description":"一、JS中数据数据类型 分为简单数据类型和复杂数据类型两种 基本数据类型分为 Number String Boolean Null Undefined symbol 复杂数据类型分为 Array，Object，Function，Reg Exp 他们的区别是 简单数据类型：是存储在栈中，如果涉及到引用就重新开辟一个内存空间，然后将内容拷贝过去 复杂数据类...","head":[["meta",{"property":"og:url","content":"https://www.jdynb.xyz/interview/qui3z9y0/"}],["meta",{"property":"og:site_name","content":"冬日暖雨"}],["meta",{"property":"og:title","content":"JS基础面试题"}],["meta",{"property":"og:description","content":"一、JS中数据数据类型 分为简单数据类型和复杂数据类型两种 基本数据类型分为 Number String Boolean Null Undefined symbol 复杂数据类型分为 Array，Object，Function，Reg Exp 他们的区别是 简单数据类型：是存储在栈中，如果涉及到引用就重新开辟一个内存空间，然后将内容拷贝过去 复杂数据类..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-17T04:45:49.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-17T04:45:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JS基础面试题\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-17T04:45:49.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"一、JS中数据数据类型","slug":"一、js中数据数据类型","link":"#一、js中数据数据类型","children":[]},{"level":2,"title":"二、数组的常用方法","slug":"二、数组的常用方法","link":"#二、数组的常用方法","children":[]},{"level":2,"title":"三、字符串常用方法","slug":"三、字符串常用方法","link":"#三、字符串常用方法","children":[]},{"level":2,"title":"四、JS中的转换机制","slug":"四、js中的转换机制","link":"#四、js中的转换机制","children":[]},{"level":2,"title":"五、和=的区别","slug":"五、和-的区别","link":"#五、和-的区别","children":[]},{"level":2,"title":"六、浅拷贝和深拷贝","slug":"六、浅拷贝和深拷贝","link":"#六、浅拷贝和深拷贝","children":[]},{"level":2,"title":"七：闭包的理解及使用","slug":"七-闭包的理解及使用","link":"#七-闭包的理解及使用","children":[]},{"level":2,"title":"八、防抖和节流的理解和使用场景","slug":"八、防抖和节流的理解和使用场景","link":"#八、防抖和节流的理解和使用场景","children":[]},{"level":2,"title":"九、作用域和作用域链","slug":"九、作用域和作用域链","link":"#九、作用域和作用域链","children":[]},{"level":2,"title":"十、原型和原型链的理解","slug":"十、原型和原型链的理解","link":"#十、原型和原型链的理解","children":[]},{"level":2,"title":"十一、如何实现继承","slug":"十一、如何实现继承","link":"#十一、如何实现继承","children":[]},{"level":2,"title":"十二、this指向问题","slug":"十二、this指向问题","link":"#十二、this指向问题","children":[]},{"level":2,"title":"十三、JS中执行上下文和执行栈","slug":"十三、js中执行上下文和执行栈","link":"#十三、js中执行上下文和执行栈","children":[]},{"level":2,"title":"十四、事件和事件流","slug":"十四、事件和事件流","link":"#十四、事件和事件流","children":[]},{"level":2,"title":"十五、typeof  和  instanceof","slug":"十五、typeof-和-instanceof","link":"#十五、typeof-和-instanceof","children":[]},{"level":2,"title":"十六、事件代理的原理和使用场景","slug":"十六、事件代理的原理和使用场景","link":"#十六、事件代理的原理和使用场景","children":[]},{"level":2,"title":"十七、new操作之后做了什么","slug":"十七、new操作之后做了什么","link":"#十七、new操作之后做了什么","children":[]},{"level":2,"title":"十八、bind、call、apply的区别","slug":"十八、bind、call、apply的区别","link":"#十八、bind、call、apply的区别","children":[]},{"level":2,"title":"十九、事件循环、宏任务和微任务","slug":"十九、事件循环、宏任务和微任务","link":"#十九、事件循环、宏任务和微任务","children":[]},{"level":2,"title":"二十、async和await是什么，实现原理","slug":"二十、async和await是什么-实现原理","link":"#二十、async和await是什么-实现原理","children":[]},{"level":2,"title":"二一、DOM增删改查","slug":"二一、dom增删改查","link":"#二一、dom增删改查","children":[]},{"level":2,"title":"二二、什么是递归、应用场景是什么","slug":"二二、什么是递归、应用场景是什么","link":"#二二、什么是递归、应用场景是什么","children":[]},{"level":2,"title":"二三、什么是内存泄漏、怎么解决内存泄漏，怎么避免","slug":"二三、什么是内存泄漏、怎么解决内存泄漏-怎么避免","link":"#二三、什么是内存泄漏、怎么解决内存泄漏-怎么避免","children":[]},{"level":2,"title":"二四、强引用、弱引用、的区别","slug":"二四、强引用、弱引用、的区别","link":"#二四、强引用、弱引用、的区别","children":[]},{"level":2,"title":"二五、本地存储的方式和区别","slug":"二五、本地存储的方式和区别","link":"#二五、本地存储的方式和区别","children":[]},{"level":2,"title":"二六、js运算精度丢失的问题，如何解决","slug":"二六、js运算精度丢失的问题-如何解决","link":"#二六、js运算精度丢失的问题-如何解决","children":[]},{"level":2,"title":"二七、懒加载的应用和原理","slug":"二七、懒加载的应用和原理","link":"#二七、懒加载的应用和原理","children":[]},{"level":2,"title":"二八、大文件上传和断点续传","slug":"二八、大文件上传和断点续传","link":"#二八、大文件上传和断点续传","children":[]},{"level":2,"title":"二九、上拉刷新和下拉刷新","slug":"二九、上拉刷新和下拉刷新","link":"#二九、上拉刷新和下拉刷新","children":[]},{"level":2,"title":"三十、单点登录","slug":"三十、单点登录","link":"#三十、单点登录","children":[]},{"level":2,"title":"三一、JS预编译","slug":"三一、js预编译","link":"#三一、js预编译","children":[]},{"level":2,"title":"三二、new的实现原理","slug":"三二、new的实现原理","link":"#三二、new的实现原理","children":[]}],"readingTime":{"minutes":12.13,"words":3640},"git":{"createdTime":1731818749000,"updatedTime":1731818749000,"contributors":[{"name":"jdy2002","email":"jiangdongyu54@gmail.com","commits":1}]},"autoDesc":true,"filePathRelative":"notes/interview/基础/3.JS基础面试题.md","bulletin":false}');export{k as comp,r as data};
